//
//  YCLoginNetWork.swift
//  YunChou
//
//  Created by grx on 2018/10/17.
//  Copyright © 2018年 grx. All rights reserved.
//

import Foundation
import Moya
import SwiftyJSON
//import SLifeLoadingView

//MARK:=========定义一个枚举，存放我们的网络请求k接口
enum loginApiManager {
    case accountLogin(loginName: String, loginPwd: String)  //账号密码登录
    case smsLogin(phone: String, vaCode: String)  //短信验证码登录
}

extension loginApiManager:TargetType{
    //MARK:=========设置不同接口的请求路径
    var path: String {
        switch self {
        case .accountLogin(loginName: _, loginPwd: _):
            return "/USER1000"
        case .smsLogin(phone: _, vaCode: _):
            return "/USER1014"
        }
    }
    //MARK:=========配置不同接口参数
    var task: Task {
        switch self {
        case let .accountLogin(loginName,loginPwd): // 带有参数,注意前面的let
            let requestModel = LoginRequestModel()
            requestModel.loginName = loginName
            requestModel.loginPwd = loginPwd
            let accountDic = requestModel.toJSON()
            print("===\(String(describing: accountDic))")
            return .requestParameters(parameters: accountDic!,
                                      encoding: URLEncoding.default)
        case let .smsLogin(phone,vaCode): // 带有参数,注意前面的let
            let requestModel = LoginRequestModel()
            requestModel.phone = phone
            requestModel.vaCode = vaCode
            let smsDic = requestModel.toJSON()
            print("===\(String(describing: smsDic))")
            return .requestParameters(parameters: smsDic!,
                                      encoding: URLEncoding.default)
        }
    }
   
    var baseURL: URL {
        return URL(string: YCBASEURL)!
    }
    //MARK:=========设置不同接口的请求方式，get或post
    var method: Moya.Method {
        return .post
    }
    var parameterEncoding: ParameterEncoding {
        return URLEncoding.default
    }
    var sampleData: Data {
        return "".data(using: String.Encoding.utf8)!
    }
    var validate: Bool {
        return false
    }
    var headers: [String : String]? {
        return nil
    }
}

// 网络请求结构体
struct YCLoginNetwork {
    // 请求成功的回调
    typealias successCallback = (_ result: JSON) -> Void
    // 请求失败的回调
    typealias failureCallback = (_ error: MoyaError) -> Void
    // 单例
    static let provider = MoyaProvider<loginApiManager>()
    // 发送网络请求
    static func request(
        target: loginApiManager,
        success: @escaping successCallback,
        failure: @escaping failureCallback
        ) {
        SLifeLoadingView.show()
        provider.request(target) { result in
            switch result {
            case let .success(moyaResponse):
                do {
                    
                    try success(JSON(moyaResponse.mapJSON())) // JSON字符串
                } catch {
                    failure(MoyaError.jsonMapping(moyaResponse))
                }
                SLifeLoadingView.hide()
            case let .failure(error):
                SLifeLoadingView.hide()
                failure(error)
            }
        }
    }
}
